[{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://lukece.github.io/CoDaImpact/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://lukece.github.io/CoDaImpact/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Dargel. Author, maintainer. Christine Thomas. Author. Rodrigue Nasr. Contributor. Sijia Pan. Contributor. Iban Rendo Barreiro. Contributor. Shuyao Li. Contributor.","code":""},{"path":"https://lukece.github.io/CoDaImpact/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dargel L, Thomas C (2024). CoDaImpact: Tools interpreting CoDa regression models. R package version 0.0.0.9001,  https://lukece.github.io/CoDaImpact/, https://github.com/LukeCe/CoDaImpact.","code":"@Manual{,   title = {CoDaImpact: Tools for interpreting CoDa regression models},   author = {Lukas Dargel and Christine Thomas},   year = {2024},   note = {R package version 0.0.0.9001,  https://lukece.github.io/CoDaImpact/},   url = {https://github.com/LukeCe/CoDaImpact}, }"},{"path":"https://lukece.github.io/CoDaImpact/index.html","id":"codaimpact","dir":"","previous_headings":"","what":"Tools for interpreting CoDa regression models","title":"Tools for interpreting CoDa regression models","text":"CoDaImpact provides additional tools interpretation regression CoDa models. conceived extension compositions package.","code":""},{"path":"https://lukece.github.io/CoDaImpact/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for interpreting CoDa regression models","text":"can install development version CoDaImpact GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"LukeCe/CoDaImpact\")"},{"path":"https://lukece.github.io/CoDaImpact/index.html","id":"example-of-a-y-compositional-model","dir":"","previous_headings":"","what":"Example of a Y-compositional model","title":"Tools for interpreting CoDa regression models","text":", estimate CoDa model explains market shares five segments car market France. illustrate influence HOUSEHOLD_EXPENDITURE market shares segment use VariationScenario(). scenario HOUSEHOLD_EXPENDITURE moved along grid variables fixed values first observation.","code":"library(\"CoDaImpact\") data(\"car_market\")  model_car_segements <- lmCoDa(   ilr(cbind(SEG_A, SEG_B, SEG_C, SEG_D, SEG_E)) ~     GDP + HOUSEHOLD_EXPENDITURE + GAS_PRICE,   data = car_market)  VS <- VariationScenario(   model_car_segements,   Xvar = \"HOUSEHOLD_EXPENDITURE\",   obs = 1,   inc_size = 100,    n_steps = 150,   add_opposite = TRUE)   plot(x = VS$HOUSEHOLD_EXPENDITURE, y = VS$Y[,1],type = \"l\", col = \"red\",      main = \"Variation scenario of household expenditure\",      xlab = \"Household expenditure\", ylab = \"Market share by segment\") lines(x = VS$HOUSEHOLD_EXPENDITURE, y = VS$Y[,2],type = \"l\", col = \"blue\" ) lines(x = VS$HOUSEHOLD_EXPENDITURE, y = VS$Y[,3],type = \"l\", col = \"green\") lines(x = VS$HOUSEHOLD_EXPENDITURE, y = VS$Y[,4],type = \"l\", col = \"orange\") lines(x = VS$HOUSEHOLD_EXPENDITURE, y = VS$Y[,5],type = \"l\", col = \"black\") legend(\"topleft\",        legend = paste0(\"Segment \", LETTERS[1:5]),        col = c(\"red\", \"blue\", \"green\", \"orange\", \"black\"),        lty = 1)"},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDaImpact-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CoDaImpact: Tools for interpreting compositional regression — CoDaImpact-package","title":"CoDaImpact: Tools for interpreting compositional regression — CoDaImpact-package","text":"package implements elasticities interpreting CoDa regression models simplex. designed add-composition package ecosystem.","code":""},{"path":[]},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDaImpact-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CoDaImpact: Tools for interpreting compositional regression — CoDaImpact-package","text":"Maintainer: Lukas Dargel lukas.dargel@mailbox.org (ORCID) Authors: Christine Thomas christine.thomas@tse-fr.eu contributors: Rodrigue Nasr [contributor] Sijia Pan [contributor] Iban Rendo Barreiro [contributor] Shuyao Li [contributor]","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","title":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","text":"Create linear path simplex defining direction step size","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","text":"","code":"CoDa_path(   comp_direc,   comp_from,   step_size = 0.01,   n_steps = 100,   add_opposite = FALSE,   dir_from_start = FALSE )"},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","text":"comp_direc numeric vector, defining direction simplex comp_from numeric vector, initial point simplex - defaults balanced composition, represents origin simplex step_size numeric, indicting step size n_steps numeric, indicating number steps taking comp_from add_opposite logical, TRUE steps opposite direction also computed dir_from_start logical, TRUE direction calculated difference comp_from comp_direc","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","text":"data.frame frame row corresponds one compositional vector","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","text":"function similar CoDa_seq(). However, drawing line starting end point uses starting point direction.","code":""},{"path":[]},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a linear path in the simplex by defining a direction and a step size — CoDa_path","text":"","code":"# three steps that go from the origin towards the defined direction comp_direc <- c(A =.4,B = .35, C= .25) CoDa_path(comp_direc, n_steps = 3) #>           A         B         C #> 0 0.3333333 0.3333333 0.3333333 #> 1 0.3352914 0.3339868 0.3307219 #> 2 0.3372497 0.3346303 0.3281200 #> 3 0.3392082 0.3352641 0.3255277   # we can draw the path that is defined by this direction comp_direc <- c(A =.4,B = .35, C= .25) compositions::plot.acomp(CoDa_path(comp_direc,n_steps = 10))  compositions::plot.acomp(CoDa_path(comp_direc,n_steps = 100))  compositions::plot.acomp(CoDa_path(comp_direc,add_opposite = TRUE))    # using the same direction we can draw a new path that does not go through the origin comp_direc <- c(A =.4,B = .35, C= .25) comp_from <- c(.7,.2,.1) compositions::plot.acomp(CoDa_path(comp_direc, comp_from,n_steps = 10))  compositions::plot.acomp(CoDa_path(comp_direc, comp_from,n_steps = 100))  compositions::plot.acomp(CoDa_path(comp_direc, comp_from,add_opposite = TRUE))    # the balanced composition does not define a direction by itself comp_origin <- c(A = 1/3, B = 1/3, C= 1/3) # corresponds to a zero vector in real space if (FALSE) CoDa_path(comp_origin, comp_from,add_opposite = TRUE)  # with the dir_from_start option the direction is derived # from the simplex line connecting two compositions path_origin <- CoDa_path(   comp_direc = comp_origin,   comp_from = comp_from,   add_opposite = TRUE,   dir_from_start = TRUE,   step_size = .1) compositions::plot.acomp(path_origin) compositions::plot.acomp(comp_origin, add = TRUE, col = \"blue\", pch = 19) compositions::plot.acomp(comp_from, add = TRUE, col = \"red\", pch = 19)"},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"A sequence connecting two points in a simplex — CoDa_seq","title":"A sequence connecting two points in a simplex — CoDa_seq","text":"sequence connecting two points simplex","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sequence connecting two points in a simplex — CoDa_seq","text":"","code":"CoDa_seq(comp_from, comp_to, n_steps = 100, add_opposite = FALSE)"},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sequence connecting two points in a simplex — CoDa_seq","text":"comp_from numeric vector, representing initial compositions comp_to numeric vector, representing final compositions. n_steps integer, indicating number steps used go comp_from comp_to add_opposite logical, TRUE path opposite direction added","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A sequence connecting two points in a simplex — CoDa_seq","text":"data.frame frame row corresponds one compositional vector","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A sequence connecting two points in a simplex — CoDa_seq","text":"sequence evenly spaced corresponds straight line simplex geometry. end point provided line connect initial point first summit simplex. Since exact zeros handled ilr replaced small constant.","code":""},{"path":[]},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_seq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A sequence connecting two points in a simplex — CoDa_seq","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/CoDa_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A sequence connecting two points in a simplex — CoDa_seq","text":"","code":"# path to the first summit of the simplex start_comp <- c(A =.4,B = .35, C= .25) compositions::plot.acomp(CoDa_seq(start_comp))  compositions::plot.acomp(CoDa_seq(start_comp, add_opposite = TRUE))   # path to an edge of the simplex end_comp <- c(0,.8,.2) compositions::plot.acomp(CoDa_seq(start_comp, end_comp)) #> Warning: Zero values in `comp_from` or `comp_to` are not permitted and were replaced by 1e-10!'  compositions::plot.acomp(CoDa_seq(start_comp, end_comp,add_opposite = TRUE)) #> Warning: Zero values in `comp_from` or `comp_to` are not permitted and were replaced by 1e-10!'"},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Computation of elasticities in CoDa regression models — Impacts","title":"Computation of elasticities in CoDa regression models — Impacts","text":"function computes elasticities semi-elasticities CoDa regression model. distinguish four cases: Y X compositional: leads elasticity Y compositional X scalar: leads semi-elasticity Y scalar X compositional: leads semi-elasticity Y X scalar: case implemented leads constant marginal effects","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computation of elasticities in CoDa regression models — Impacts","text":"","code":"Impacts(object, Xvar = NULL, obs = 1)"},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computation of elasticities in CoDa regression models — Impacts","text":"object object class \"lmCoDa\" Xvar character indicating name one explanatory variable obs numeric refers indicator one observation","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computation of elasticities in CoDa regression models — Impacts","text":"matrix","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computation of elasticities in CoDa regression models — Impacts","text":"mathematical foundation elasticity computations CoDa model come Morais Thomas-Agnan (2021). Dargel Thomas-Agnan (2021) present results illustrations.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computation of elasticities in CoDa regression models — Impacts","text":"\" Dargel, Lukas Christine Thomas-Agnan, “Share-ratio interpretations compositional regression models”, TSE Working Paper, n. 23-1456, July 2023. Morais, Joanna Christine Thomas-Agnan. \"Impact covariates compositional models simplicial derivatives.\" Austrian Journal Statistics 50.2 (2021): 1-15.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computation of elasticities in CoDa regression models — Impacts","text":"Lukas Dargel Rodrigue Nasr","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/Impacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computation of elasticities in CoDa regression models — Impacts","text":"","code":"res <- lmCoDa(YIELD ~ PRECIPITATION + ilr(TEMPERATURES), data = head(rice_yields,20)) Impacts(res, Xvar = \"TEMPERATURES\") #>               YIELD #> LOW    -0.002055032 #> MIDDLE -0.098267445 #> HIGH    0.100322476"},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"CoDa models compositional dependent variable (Y) share ratio elasticities (SRE) allow interpret influence compositional explanatory variables (X). interpretation analogous usual elasticities: share ratio X increases 1% share ratio Y increases SRE% main difference usual elasticities , since X compositional change X musts specified terms direction simplex.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"","code":"ShareRatioElasticities(object, Xvar, Xdir = NULL)"},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"object object class \"lmCoDa\" Xvar character indicating name explanatory variable changes Xdir numeric vector, single character, NULL: numeric Xdir taken fixed direction simplex character Xdir interpreted one summit X composition converted fixed direction towards summit NULL share ratio elasticities computed variable directions corresponding example Dargel Thomas-Agnan (2023)","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"data.frame","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"details interpretation can found Dargel Thomas-Agnan (2023) accompanying vignette.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"Dargel, Lukas Christine Thomas-Agnan, “Share-ratio interpretations compositional regression models”, TSE Working Paper, n. 23-1456, July 2023.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ShareRatioElasticities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute share ratio elasticities for CoDa models — ShareRatioElasticities","text":"","code":"### XY-compositional model res <- lmCoDa(   ilr(cbind(left, right, extreme_right)) ~   ilr(cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)),   data =  head(election, 20))  ## Focus on changes in the education composition educ_comp <- \"cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)\"  ## case 1 ## changes towards the summit \"Educ_Higher\" as (fixed) direction SRE1 <- ShareRatioElasticities(res, Xvar = educ_comp, Xdir = \"Educ_Higher\")  SRE1[1,] #>      Yj   Yl              Xj                    Xl SRE #> 1 right left Educ_Highschool Educ_BeforeHighschool Inf # Result: SRE=Inf # cannot be interpreted because, for this direction, # the relative change in the share ratio of X (Highschool / BeforeHighschool) is zero SRE1[7,] #>      Yj   Yl          Xj                    Xl       SRE #> 7 right left Educ_Higher Educ_BeforeHighschool 0.9161426 # Result: SRE=0.9 # when the ratio of X (Higher / BeforeHighschool) increases by 1% # the ratio of Y (right / left) increases by about 0.9%  ## case 2 ## numeric vector as (fixed) direction SRE2 <- ShareRatioElasticities(res, Xvar = educ_comp, Xdir = exp(c(0,0,1))) identical(SRE1,SRE2) # exp(c(0,0,1)) is the direction that points to the third summit #> [1] TRUE  ## case 3 ## variable directions with Xdir = NULL ## In this case the direction depends components used for the share ratio of X ## In particular the component of X in the numerator grows ## by the same rate as the denominator decreases SRE3 <- ShareRatioElasticities(res, Xvar = educ_comp, Xdir = NULL) SRE3[1,] #>      Yj   Yl              Xj                    Xl       SRE #> 1 right left Educ_Highschool Educ_BeforeHighschool -2.839466 # Result: SRE=-2.8 # when the ratio of X (Highschool / BeforeHighschool) increases by 1% # the ratio of Y (right / left) decreases by about -2.8%"},{"path":"https://lukece.github.io/CoDaImpact/reference/ToSimplex.html","id":null,"dir":"Reference","previous_headings":"","what":"Converting Linear Models to CoDa models — ToSimplex","title":"Converting Linear Models to CoDa models — ToSimplex","text":"function converts output \"lm\" \"lmCoDa\" class, offers additional tools interpretation CoDa regression models. work done transformationSummary() function, documentation page, reserved internal use.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ToSimplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converting Linear Models to CoDa models — ToSimplex","text":"","code":"ToSimplex(object)"},{"path":"https://lukece.github.io/CoDaImpact/reference/ToSimplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converting Linear Models to CoDa models — ToSimplex","text":"object object class \"lmCoDa\"","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ToSimplex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converting Linear Models to CoDa models — ToSimplex","text":"object class \"lm\" \"lmCoDa\" formula include least one log-transformation","code":""},{"path":[]},{"path":"https://lukece.github.io/CoDaImpact/reference/ToSimplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converting Linear Models to CoDa models — ToSimplex","text":"Lukas Dargel Rodrigue Nasr","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/ToSimplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converting Linear Models to CoDa models — ToSimplex","text":"","code":"# XY-compositional model res <- lm(   ilr(cbind(left, right, extreme_right)) ~   ilr(cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)),   data =  head(election, 20)) res <- ToSimplex(res)  # X-compositional model res <- lm(YIELD ~ PRECIPITATION + ilr(TEMPERATURES), data = head(rice_yields, 20)) res <- ToSimplex(res)"},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Scenarios for variation in CoDa regressions models — VariationScenario","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"Scenarios type illustrated Dargel Thomas-Agnan (2023). allow evaluate response variable (Y) CoDa model evolve hypothetical scenario linear changes one explanatory variable (X). changing explanatory variable compositional term \"linear\" understood respect geometry simplex.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"","code":"VariationScenario(   object,   Xvar,   Xdir,   obs = 1,   inc_size = 0.1,   n_steps = 100,   add_opposite = TRUE,   normalize_Xdir = TRUE )"},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"object object class \"lmCoDa\" Xvar character indicating name explanatory variable changes Xdir either character numeric, indicate direction Xvar change character one components X, case direction corresponding vertex simplex numeric argument coerced unit vector simplex (Xvar refers scalar variable argument ignored) obs numeric indicating observation used scenario inc_size numeric indicating distance point scenario X n_steps numeric indicating number points scenario add_opposite logical, TRUE scenario also includes changes opposite direction normalize_Xdir logical, TRUE direction Xdir scaled Aitchison norm 1, allowing interpret inc_size Aitchison distance","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"data.frame containing scenario X corresponding predicted values Y","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"linear scenario X computed seq() scalar case CoDa_seq() compositional case. corresponding changes Y computed prediction formula, exploit fact one variable changing.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"Dargel, Lukas Christine Thomas-Agnan, “Share-ratio interpretations compositional regression models”, TSE Working Paper, n. 23-1456, July 2023.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationScenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scenarios for variation in CoDa regressions models — VariationScenario","text":"","code":"# ---- model with scalar response ---- res <- lmCoDa(YIELD ~ PRECIPITATION + ilr(TEMPERATURES), data = head(rice_yields,20)) VariationScenario(res, Xvar = \"TEMPERATURES\", Xdir = \"MIDDLE\", n_steps = 5) #>       YIELD        X.LOW     X.MIDDLE       X.HIGH #> -5 2.781911 5.360699e-07 9.314607e-01 6.853880e-02 #> -4 2.769875 4.780533e-07 9.388784e-01 6.112112e-02 #> -3 2.757840 4.259484e-07 9.455403e-01 5.445930e-02 #> -2 2.745805 3.792293e-07 9.515136e-01 4.848607e-02 #> -1 2.733770 3.374008e-07 9.568616e-01 4.313811e-02 #> 0  2.721734 2.999999e-07 9.616435e-01 3.835625e-02 #> 1  2.709699 2.665971e-07 9.659142e-01 3.408557e-02 #> 2  2.697664 2.367965e-07 9.697243e-01 3.027543e-02 #> 3  2.685629 2.102343e-07 9.731204e-01 2.687934e-02 #> 4  2.673593 1.865784e-07 9.761450e-01 2.385483e-02 #> 5  2.661558 1.655264e-07 9.788366e-01 2.116324e-02 VariationScenario(res, Xvar = \"PRECIPITATION\", n_steps = 5) #>       YIELD PRECIPITATION #> -5 2.930587      0.620756 #> -4 2.888817      0.720756 #> -3 2.847046      0.820756 #> -2 2.805275      0.920756 #> -1 2.763505      1.020756 #> 0  2.721734      1.120756 #> 1  2.679964      1.220756 #> 2  2.638193      1.320756 #> 3  2.596423      1.420756 #> 4  2.554652      1.520756 #> 5  2.512882      1.620756   # ---- model with compositional response ---- res <- lmCoDa(ilr(cbind(left, right, extreme_right)) ~                 ilr(cbind(Age_1839, Age_4064)) +                 ilr(cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)) +                 log(unemp_rate),               data = head(election))  VariationScenario(res, Xvar =\"cbind(Age_1839,Age_4064)\",Xdir = \"Age_1839\", n_steps = 5) #>         Y.left     Y.right Y.extreme_right X.Age_1839 X.Age_4064 #> -5 0.003036601 0.802915649     0.194047750  0.2465168  0.7534832 #> -4 0.008122066 0.768193441     0.223684493  0.2737149  0.7262851 #> -3 0.021412833 0.724436090     0.254151077  0.3027083  0.6972917 #> -2 0.054893832 0.664310871     0.280795297  0.3333632  0.6666368 #> -1 0.132743157 0.574621429     0.292635414  0.3654953  0.6345047 #> 0  0.285835440 0.442596135     0.271568425  0.3988714  0.6011286 #> 1  0.509336842 0.282110011     0.208553147  0.4332143  0.5667857 #> 2  0.727490289 0.144132683     0.128377028  0.4682111  0.5317889 #> 3  0.871899806 0.061790786     0.066309409  0.5035235  0.4964765 #> 4  0.945066907 0.023957503     0.030975590  0.5388007  0.4611993 #> 5  0.977332405 0.008862233     0.013805362  0.5736935  0.4263065 VariationScenario(res, \"log(unemp_rate)\", n_steps = 5) #>        Y.left    Y.right Y.extreme_right log(unemp_rate) #> -5 0.59371706 0.29175126      0.11453169       -2.843614 #> -4 0.53091223 0.32820682      0.14088095       -2.743614 #> -3 0.46669548 0.36295279      0.17035173       -2.643614 #> -2 0.40314639 0.39443095      0.20242267       -2.543614 #> -1 0.34228761 0.42129961      0.23641279       -2.443614 #> 0  0.28583544 0.44259613      0.27156843       -2.343614 #> 1  0.23502387 0.45782043      0.30715570       -2.243614 #> 2  0.19053546 0.46692883      0.34253570       -2.143614 #> 3  0.15253460 0.47025661      0.37720879       -2.043614 #> 4  0.12077066 0.46840298      0.41082636       -1.943614 #> 5  0.09471036 0.46211210      0.44317754       -1.843614"},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Effects of infinitesimal changes in CoDa models — VariationTable","title":"Effects of infinitesimal changes in CoDa models — VariationTable","text":"function allows evaluate change explanatory variables impacts response variable CoDa regression model. changes calculated based approximate formal presented Dargel Thomas-Agnan (2023). Changes response variables provided data.frame underlying changes explanatory variable given attributes.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effects of infinitesimal changes in CoDa models — VariationTable","text":"","code":"VariationTable(   object,   Xvar,   Xdir,   obs = 1,   inc_size = 0.1,   inc_rate = NULL,   Ytotal = 1,   normalize_Xdir = TRUE )"},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effects of infinitesimal changes in CoDa models — VariationTable","text":"object object class \"lmCoDa\" Xvar character indicating name explanatory variable changes Xdir either character numeric, indicate direction Xvar change character one components X, case direction corresponding vertex simplex numeric argument coerced unit vector simplex (Xvar refers scalar variable argument ignored) obs numeric indicating observation used scenario inc_size numeric indicating distance point scenario X inc_rate numeric can used parameterization step size Ytotal numeric indicating total Y normalize_Xdir logical, TRUE direction Xdir scaled Aitchison norm 1, allowing interpret inc_size Aitchison distance","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Effects of infinitesimal changes in CoDa models — VariationTable","text":"data.frame","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationTable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Effects of infinitesimal changes in CoDa models — VariationTable","text":"Dargel, Lukas Christine Thomas-Agnan, “Share-ratio interpretations compositional regression models”, TSE Working Paper, n. 23-1456, July 2023.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationTable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Effects of infinitesimal changes in CoDa models — VariationTable","text":"Lukas Dargel Rodrigue Nasr","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/VariationTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effects of infinitesimal changes in CoDa models — VariationTable","text":"","code":"# XY-compositional model res <- lmCoDa(   ilr(cbind(left, right, extreme_right)) ~   ilr(cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)),   data =  head(election, 20))  # Focus on changes in the education composition educ_comp <- \"cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)\"  # ... changes towards a summit towards a summit (higher share of people with lower education) VariationTable(res, educ_comp, Xdir = \"Educ_BeforeHighschool\") #>                              left     right extreme_right #> Initial parts           0.3395614 0.4066297     0.2538089 #> New parts               0.2519498 0.4203111     0.3277390 #> Elasticity             -2.5801405 0.3364601     2.9128277 #> Variation in %        -25.8014049 3.3646008    29.1282765 #> Variation in % points  -8.7611620 1.3681465     7.3930155  # ... same changes using a compositional vector as direction VariationTable(res, educ_comp, Xdir = c(.5,.25,.25)) #>                              left     right extreme_right #> Initial parts           0.3395614 0.4066297     0.2538089 #> New parts               0.2519498 0.4203111     0.3277390 #> Elasticity             -2.5801405 0.3364601     2.9128277 #> Variation in %        -25.8014049 3.3646008    29.1282765 #> Variation in % points  -8.7611620 1.3681465     7.3930155  # ... changes in a more general direction and for a different observation VariationTable(res, educ_comp, Xdir = c(.35,.45,.10), obs = 2) #>                             left      right extreme_right #> Initial parts          0.3375668  0.4066003     0.2558329 #> New parts              0.3906038  0.3999548     0.2094415 #> Elasticity             1.5711531 -0.1634408    -1.8133484 #> Variation in %        15.7115308 -1.6344077   -18.1334837 #> Variation in % points  5.3036919 -0.6645506    -4.6391412"},{"path":"https://lukece.github.io/CoDaImpact/reference/car_market.html","id":null,"dir":"Reference","previous_headings":"","what":"French car market data — car_market","title":"French car market data — car_market","text":"data set shows monthly data French car market 2003 2015. market divided 5 main segments (E), according size vehicle chassis. Morais et. al (2018) first used data compare compositional Dirichlet models market shares.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/car_market.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"French car market data — car_market","text":"","code":"car_market"},{"path":"https://lukece.github.io/CoDaImpact/reference/car_market.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"French car market data — car_market","text":"object class data.frame 152 rows 10 columns.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/car_market.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"French car market data — car_market","text":"figures GDP household expenditure originally provided National Institute Statistics Economic Studies (INSEE). gas prices OECD. market share segment come simulation Renault.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/car_market.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"French car market data — car_market","text":"SEG_: Corresponds shares sales five market segments ,B,C,D E. smallest cars E largest. segmentation explained wikipedia. GDP: GDP figures millions current prices HOUSEHOLD_EXPENDITURE: total household expenditure millions previous years prices GAS_PRICE: Corresponds gas price including VAT. SCRAPPING_SUBSIDY: dummy indicating periods French government provided subsidies scrapping car.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/car_market.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"French car market data — car_market","text":"Joanna Morais, Christine Thomas-Agnan & Michel Simioni (2018) Using compositional Dirichlet models market share regression, Journal Applied Statistics, 45:9, 1670-1689, DOI: 10.1080/02664763.2017.1389864","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/car_market.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"French car market data — car_market","text":"Lukas Dargel, Christine Thomas-Agnan","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: check for valid computational direction arguments — check_Xdir","title":"Internal: check for valid computational direction arguments — check_Xdir","text":"Internal: check valid computational direction arguments","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: check for valid computational direction arguments — check_Xdir","text":"","code":"check_Xdir(Xdir, Xopts, normalize = FALSE)"},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: check for valid computational direction arguments — check_Xdir","text":"Xdir character numeric indicating direction Xopts character indicating names vertices normalize logical true Xdir normalized Aitchison norm 1","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal: check for valid computational direction arguments — check_Xdir","text":"numeric vector","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xdir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal: check for valid computational direction arguments — check_Xdir","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: check for valid name of Xvar — check_Xvar","title":"Internal: check for valid name of Xvar — check_Xvar","text":"Users always specify Xvar \"NAME_SIMLEX\", means logratio transformations.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: check for valid name of Xvar — check_Xvar","text":"","code":"check_Xvar(   Xvar,   trSry,   return_type = c(\"NAME_SIMPLEX\", \"NAME_COORD\", \"pos\")[1] )"},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: check for valid name of Xvar — check_Xvar","text":"Xvar character numeric indicating direction trSry character indicating names vertices","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal: check for valid name of Xvar — check_Xvar","text":"single integer character","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/check_Xvar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal: check for valid name of Xvar — check_Xvar","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/coef.lmCoDa.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions, fitted values, residuals, and coefficients in CoDa models — coef.lmCoDa","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — coef.lmCoDa","text":"functions work usual lm object. additionally offer possibility use space argument transforms directly clr space simplex.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/coef.lmCoDa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — coef.lmCoDa","text":"","code":"# S3 method for lmCoDa coef(object, space = NULL, separate = FALSE, ...)"},{"path":"https://lukece.github.io/CoDaImpact/reference/coef.lmCoDa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — coef.lmCoDa","text":"object class \"lmCoDa\" space character indicating space prediction returned. Supported options c(\"clr\", \"simplex\"). separate logical, TRUE coefficients reported list instead matrix, list structure reflects explanatory variables model ... used","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/coef.lmCoDa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — coef.lmCoDa","text":"matrix","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/coef.lmCoDa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — coef.lmCoDa","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for CoDa Models — confint.lmCoDa","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"Dargel Thomas-Agnan (2023) show compute variances confidence intervals parameters CoDa models log-ratio spaces. particular interest clr parameters since can directly interpreted differences average elasticity. Another option interpret difference clr parameters coincide difference elasticities.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"","code":"# S3 method for lmCoDa confint(object, parm, level = 0.95, y_ref = NULL, obs = NULL, ...)"},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"object class \"lmCoDa\" parm character, indicating name one explanatory variable level numeric, indicating confidence level required y_ref optional argument indicates reference component response variable using name position.  argument used Y-compositional model. supplied confidence intervals difference used instead direct intervals parameters. obs optional integer indicates one observation argument supplied function return observation dependent elasticity ... passed confit()","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"data.frame","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"Since CoDa models often multivariate function allows specify one explanatory variable time. output also complex usual one \"lm\" classes, indicate component Y X. confint.lm() still possible compute usual confidence intervals.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"Dargel, Lukas Christine Thomas-Agnan, “Share-ratio interpretations compositional regression models”, TSE Working Paper, n. 23-1456, July 2023.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/confint.lmCoDa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for CoDa Models — confint.lmCoDa","text":"","code":"## ==== Y-compositional model ==== res <- lmCoDa(   ilr(cbind(left, right, extreme_right)) ~   ilr(cbind(Age_1839, Age_4064)) +   ilr(cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)) +   unemp_rate,   data = head(election, 20))  ## ---- CI for scalar X # CI for clr parameters confint(res, \"unemp_rate\") #>               Y          X        EST       SD       2.5 %    97.5 % #> 1          left unemp_rate   1.903993 5.473901  -9.7633504 13.571336 #> 2         right unemp_rate -12.240237 5.000438 -22.8984177 -1.582056 #> 3 extreme_right unemp_rate  10.336244 4.634737   0.4575352 20.214953 # CI for difference in clr parameters (coincides with difference in the semi elasticity) confint(res, \"unemp_rate\", y_ref = 1) #>   Y_ref             Y          X       DIFF       SD     2.5 %   97.5 % #> 1  left          left unemp_rate   0.000000 0.000000   0.00000  0.00000 #> 2  left         right unemp_rate -14.144230 9.405060 -34.19064  5.90218 #> 3  left extreme_right unemp_rate   8.432251 8.825213 -10.37824 27.24275 # CI for the observation dependent elasticity confint(res, \"unemp_rate\", obs = 1) #>               Y          X     IMPACT       SD       2.5 %    97.5 % #> 1          left unemp_rate   1.903993 5.473901  -9.7633504 13.571336 #> 2         right unemp_rate -12.240237 5.000438 -22.8984177 -1.582056 #> 3 extreme_right unemp_rate  10.336244 4.634737   0.4575352 20.214953  ## ---- CI for compositional X # CI for clr parameters confint(res, \"cbind(Age_1839, Age_4064)\") #>               Y        X        EST        SD     2.5 %   97.5 % #> 1          left Age_1839  0.4116622 0.9179218 -1.544842 2.368166 #> 2         right Age_1839  0.1906355 0.8385265 -1.596641 1.977912 #> 3 extreme_right Age_1839 -0.6022978 0.7772020 -2.258865 1.054269 #> 4          left Age_4064 -0.4116622 0.9179218 -2.368166 1.544842 #> 5         right Age_4064 -0.1906355 0.8385265 -1.977912 1.596641 #> 6 extreme_right Age_4064  0.6022978 0.7772020 -1.054269 2.258865  # CI for difference in clr parameters (coincides with difference in the elasticity) confint(res, \"cbind(Age_1839, Age_4064)\", y_ref = 1) #>   Y_ref             Y        X       DIFF       SD     2.5 %   97.5 % #> 1  left          left Age_1839  0.0000000 0.000000  0.000000 0.000000 #> 2  left         right Age_1839 -0.2210267 1.577140 -3.582621 3.140568 #> 3  left extreme_right Age_1839 -1.0139600 1.479905 -4.168304 2.140384 #> 4  left          left Age_4064  0.0000000 0.000000  0.000000 0.000000 #> 5  left         right Age_4064  0.2210267 1.577140 -3.140568 3.582621 #> 6  left extreme_right Age_4064  1.0139600 1.479905 -2.140384 4.168304  # CI for the observation dependent elasticity confint(res, \"cbind(Age_1839, Age_4064)\", obs = 1) #>               Y        X     IMPACT        SD     2.5 %   97.5 % #> 1          left Age_1839  0.4116622 0.9179218 -1.544842 2.368166 #> 2         right Age_1839  0.1906355 0.8385265 -1.596641 1.977912 #> 3 extreme_right Age_1839 -0.6022978 0.7772020 -2.258865 1.054269 #> 4          left Age_4064 -0.4116622 0.9179218 -2.368166 1.544842 #> 5         right Age_4064 -0.1906355 0.8385265 -1.977912 1.596641 #> 6 extreme_right Age_4064  0.6022978 0.7772020 -1.054269 2.258865"},{"path":"https://lukece.github.io/CoDaImpact/reference/election.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of french departmental elections in 2015 — election","title":"Results of french departmental elections in 2015 — election","text":"data used Nguyen et. al (2020) originally disseminated French ministry (Ministère de l'Intérieur et des Outre-Mer). Information population characteristics comes french national statistics institute (INSEE).","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/election.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results of french departmental elections in 2015 — election","text":"","code":"election"},{"path":"https://lukece.github.io/CoDaImpact/reference/election.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results of french departmental elections in 2015 — election","text":"object class data.frame 95 rows 13 columns.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/election.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Results of french departmental elections in 2015 — election","text":"https://www.data.gouv.fr/fr/datasets/elections-departementales-2015-resultats-par-bureaux-de-vote https://www.insee.fr","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/election.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Results of french departmental elections in 2015 — election","text":"left, right, extreme_right: Vote shares election grouped three blocks Age_1839, Age_4064, Age_65plus: Share population falling one three age categories Educ_BeforeHighschool, Educ_Highschool, Educ_Higher: Share population completed certain level education. asset_owner_rate: proportion people assets income_taxpayer_rate: proportion people pay income tax forgeigner_rate: proportion foreigners","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/election.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Results of french departmental elections in 2015 — election","text":"Nguyen THA, Laurent T, Thomas-Agnan C, Ruiz-Gazen . Analyzing impacts socio-economic factors French departmental elections CoDa methods. J Appl Stat. 2020 Dec 9;49(5):1235-1251. doi: 10.1080/02664763.2020.1858274. PMID: 35707505; PMCID: PMC9041641.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/election.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Results of french departmental elections in 2015 — election","text":"Lukas Dargel, Christine Thomas-Agnan","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/fitted.lmCoDa.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions, fitted values, residuals, and coefficients in CoDa models — fitted.lmCoDa","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — fitted.lmCoDa","text":"functions work usual lm object. additionally offer possibility use space argument transforms directly clr space simplex.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/fitted.lmCoDa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — fitted.lmCoDa","text":"","code":"# S3 method for lmCoDa fitted(object, space = NULL, ...)"},{"path":"https://lukece.github.io/CoDaImpact/reference/fitted.lmCoDa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — fitted.lmCoDa","text":"object class \"lmCoDa\" space character indicating space prediction returned. Supported options c(\"clr\", \"simplex\"). ... passed predict.lm()","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/fitted.lmCoDa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — fitted.lmCoDa","text":"matrix vector","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/fitted.lmCoDa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — fitted.lmCoDa","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/lmCoDa.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating CoDa regression models — lmCoDa","title":"Estimating CoDa regression models — lmCoDa","text":"thin wrapper around lm() followed ToSimplex(), allows create lmCoDa object one step.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/lmCoDa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating CoDa regression models — lmCoDa","text":"","code":"lmCoDa(formula, data, ...)"},{"path":"https://lukece.github.io/CoDaImpact/reference/lmCoDa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating CoDa regression models — lmCoDa","text":"formula lm() data lm() ... arguments passed lm()","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/lmCoDa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating CoDa regression models — lmCoDa","text":"object class \"lm\" \"lmCoDa\" formula include least one log-transformation","code":""},{"path":[]},{"path":"https://lukece.github.io/CoDaImpact/reference/lmCoDa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimating CoDa regression models — lmCoDa","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/lmCoDa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating CoDa regression models — lmCoDa","text":"","code":"# XY-compositional model res <- lmCoDa(   ilr(cbind(left, right, extreme_right)) ~   ilr(cbind(Educ_BeforeHighschool, Educ_Highschool, Educ_Higher)),   data =  head(election, 20))  # X-compositional model res <- lmCoDa(YIELD ~ PRECIPITATION + ilr(TEMPERATURES), data = head(rice_yields, 20))"},{"path":"https://lukece.github.io/CoDaImpact/reference/pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numbers to percentages\nThis code copied from stats:::format.perc(), to avoid notes about the ::: operator. — pct","title":"Format numbers to percentages\nThis code copied from stats:::format.perc(), to avoid notes about the ::: operator. — pct","text":"Format numbers percentages code copied stats:::format.perc(), avoid notes ::: operator.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numbers to percentages\nThis code copied from stats:::format.perc(), to avoid notes about the ::: operator. — pct","text":"","code":"pct(probs, digits = 10)"},{"path":"https://lukece.github.io/CoDaImpact/reference/predict.lmCoDa.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions, fitted values, residuals, and coefficients in CoDa models — predict.lmCoDa","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — predict.lmCoDa","text":"functions work usual lm object. additionally offer possibility use space argument transforms directly clr space simplex.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/predict.lmCoDa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — predict.lmCoDa","text":"","code":"# S3 method for lmCoDa predict(object, space = NULL, ...)"},{"path":"https://lukece.github.io/CoDaImpact/reference/predict.lmCoDa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — predict.lmCoDa","text":"object class \"lmCoDa\" space character indicating space prediction returned. Supported options c(\"clr\", \"simplex\"). ... passed predict.lm()","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/predict.lmCoDa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — predict.lmCoDa","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. compositions alr, alrInv, clr, clrInv, ilr, ilrInv","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/residuals.lmCoDa.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions, fitted values, residuals, and coefficients in CoDa models — residuals.lmCoDa","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — residuals.lmCoDa","text":"functions work usual lm object. additionally offer possibility use space argument transforms directly clr space simplex.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/residuals.lmCoDa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — residuals.lmCoDa","text":"","code":"# S3 method for lmCoDa residuals(object, space = NULL, ...)"},{"path":"https://lukece.github.io/CoDaImpact/reference/residuals.lmCoDa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — residuals.lmCoDa","text":"object class \"lmCoDa\" space character indicating space prediction returned. Supported options c(\"clr\", \"simplex\"). ... passed predict.lm()","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/residuals.lmCoDa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — residuals.lmCoDa","text":"matrix vector","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/residuals.lmCoDa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predictions, fitted values, residuals, and coefficients in CoDa models — residuals.lmCoDa","text":"Lukas Dargel","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/rice_yields.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on the rice yields in the Vietnamese provinces — rice_yields","title":"Data on the rice yields in the Vietnamese provinces — rice_yields","text":"data used article (Huong et al. 2023), study impact climate change rice production Vietnam.  contains following information: PROVINCE: factor 63 provinces Vietnam REGION: factor 6 main regions YEAR: numeric corresponding year YIELD: numeric rice production tonnes per hectare PRECIPITATION: numeric annual precipitation liters TEMPERATURES: compositional variable represented matrix  corresponding fraction days year maximal temperature falls one three categories, \"LOW\", \"MIDDLE\" \"HIGH\".","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/rice_yields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on the rice yields in the Vietnamese provinces — rice_yields","text":"","code":"rice_yields"},{"path":"https://lukece.github.io/CoDaImpact/reference/rice_yields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on the rice yields in the Vietnamese provinces — rice_yields","text":"object class data.frame 1890 rows 6 columns.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/rice_yields.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data on the rice yields in the Vietnamese provinces — rice_yields","text":"Thi-Huong Trinh, Michel Simioni, Christine Thomas-Agnan, “Discrete Smooth Scalar--Density Compositional Regression Assessing Impact Climate Change Rice Yield Vietnam”, TSE Working Paper, n. 23-1410, February 2023.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/rice_yields.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data on the rice yields in the Vietnamese provinces — rice_yields","text":"Lukas Dargel, Christine Thomas-Agnan","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/transformationSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the transformations in a CoDa model (internal) — transformationSummary","title":"Summarize the transformations in a CoDa model (internal) — transformationSummary","text":"Extract CoDa model estimated lm() information related log-ratio transformations variables parameters.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/transformationSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the transformations in a CoDa model (internal) — transformationSummary","text":"","code":"transformationSummary(lm_res)"},{"path":"https://lukece.github.io/CoDaImpact/reference/transformationSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the transformations in a CoDa model (internal) — transformationSummary","text":"lm_res class \"lm\"","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/transformationSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the transformations in a CoDa model (internal) — transformationSummary","text":"data.frame, list columns","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/transformationSummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize the transformations in a CoDa model (internal) — transformationSummary","text":"structure return value resembles data.frame columns lists instead vectors. rows data.frame correspond variables used fitting model. columns store information log-ratio transformations associated bases (K F). Additionally clr parameters covariance matrices retained.","code":""},{"path":"https://lukece.github.io/CoDaImpact/reference/transformationSummary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize the transformations in a CoDa model (internal) — transformationSummary","text":"Lukas Dargel","code":""}]
